using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using ppt.Data;
using ppt.Models;

namespace ppt.Services
{
    public class PartidaService : IPartidaService
    {
        private readonly AppDbContext _context;
	 private readonly ILogger<PartidaService> _logger;

        public PartidaService(AppDbContext context, ILogger<PartidaService> logger)
        {
            _context = context;
            _logger = logger;
        }

        public async Task<Juego?> ObtenerOCrearJuegoAsync(string codigo)
        {
            _logger.LogInformation("Iniciando el proceso de crear juego {codigo}", codigo);

            string codigoParaBuscar = (codigo.Length == 6) ? codigo.Substring(1) : codigo;

            var juego = await _context.Juegos.FirstOrDefaultAsync(j => j.CodigoInscrip == codigoParaBuscar);

            if (juego == null)
            {
                juego = new Juego { CodigoInscrip = codigoParaBuscar };
                _context.Juegos.Add(juego);
                await _context.SaveChangesAsync();
            }

            return juego;
        }

        public async Task<bool> VerificarCodigoExistenteAsync(string codigo)
        {
            string codigoParaBuscar = (codigo.Length == 6) ? codigo.Substring(1) : codigo;
            return await _context.Juegos.AnyAsync(j => j.CodigoInscrip == codigoParaBuscar);
        }

        public async Task<Juego?> ObtenerJuegoPorCodigoAsync(string codigo)
        {
            string codigoParaBuscar = (codigo.Length == 6) ? codigo.Substring(1) : codigo;
            return await _context.Juegos.FirstOrDefaultAsync(j => j.CodigoInscrip == codigoParaBuscar);
        }

        public async Task<bool> AgregarJugadorAsync(string codigo, string jugador)
        {
            var juego = await ObtenerOCrearJuegoAsync(codigo);

            if (juego == null)
                return false;

            if (codigo.Length == 6)
            {
                if (string.IsNullOrEmpty(juego.Jugador1))
                {
                    juego.Jugador1 = jugador;
                }
                else
                {
                    return false; // Ya hay un jugador en la posición 1
                }
            }
            else if (codigo.Length == 5)
            {
                if (string.IsNullOrEmpty(juego.Jugador2))
                {
                    juego.Jugador2 = jugador;
                }
                else
                {
                    return false; // Ya hay un jugador en la posición 2
                }
            }
            else
            {
                return false; // Código no válido
            }

            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> CompletarPreparacionJuegoAsync(string codigo)
        {
            var juego = await ObtenerJuegoPorCodigoAsync(codigo);

            if (juego == null || string.IsNullOrEmpty(juego.Jugador1) || string.IsNullOrEmpty(juego.Jugador2))
                return false;

            // Implementa aquí la lógica para completar la preparación del juego si es necesario

            return true;
        }
//-------------------------------------------------------------------------------




   //-----------------------------------------------------------------------------

   public async Task<EstadoJuego?> ObtenerEstadoJuegoAsync(string codigoJuego)
        {
	var juego = await _context.Juegos
        .Where(j => j.CodigoInscrip == codigoJuego)
        .FirstOrDefaultAsync();

    if (juego == null)
        return null;

    return new EstadoJuego
    {
        CodigoJuego = juego.CodigoInscrip,
        Usuarios = new Dictionary<string, Jugador>
        {
            { "Servidor1", new Jugador { Username = juego.Jugador1, Puntos = juego.PuntajeJ1 ?? 0 } },
            { "Servidor2", new Jugador { Username = juego.Jugador2, Puntos = juego.PuntajeJ2 ?? 0 } }
        }
    };
        }
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    }
}
